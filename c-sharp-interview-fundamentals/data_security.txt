Basics of Assemblies.
Assemblies are the basic unit of deployment in .NET.
An assembly is a container for a Windows Portable Executable (PE) file.
We know PEs by their file extensions.
 .exe files are application executables.
 .dll files are reusable library files.
 
An assembly contains up to four categories of info.
Assembly Manifest, Application Manifest, Compiled Types and Resources.

Assembly Manifest is the only mandatory item in an assembly.
Assembly Manifest describs the assembly to the managed hosting environment.
Assembly Manifest servers a directory to the contents of the assembly.
Assembly Manifest makes the assembly self-describing.

Application Manifest provides info for the operating system.
Application Manifest has deployment insturctions and whether administrative elevation is required.

Compiled Types compiled IL code of types.

Resources contains all other data as needed such as images, localizable text, etc.

GAC Basics.
The Global Assembly Cache (GAC) is a central repository for .NET assemblies.
Assemblies that are shared by several applications on the cmputer should be stored in GAC.
Assemblies must be strongly-named to be placed in GAC. 
Generated by using the private key that corresponds to public key distributed with the assembly and the assembly itself. 
Strong-naming an assembly creates a unique identity for the assembly. do not rely on strong-naming for security.

There are two ways to place an assembly in the GAC.
Use an installer that is designed to work with the GAC. 
Use the Global Assembly Cache tool (Gacutil.exe)

The default location for the GAC has been changed starting with the .NET Framework 4.0.
Prior to 4.0, it was in %windir%\assembly.
4.0 and laster, it is in %windir%\Microsoft.NET\assembly

There are scenarios where you explcitiy do not want to install an assembly into the global assembly cache.
XCOPY or ClickOnce deployment cannot be used because administrative actions are required to install.
Updating GAC assemblies require administrative privileges.
Testing can become more difficult.
Versioning and side-by-side execution becomes more complex.

Encrypting User Files
The .NEt Framework makes encrypting files easy.
When working with files, the File object provides two methods: Encrypt method and Decrypt method.
These methodes perform all encryption and decryption activities in the background.
	Same functionality as check boxes on file properties in Explorer.
	Same limitations/concerns.
	Encryption is based on the user's password.

Hashing
What is Hasing? Hashing is a one-way encryption technique that produces a fixed-length fingerprint of data.
The hash cannot be reversed.
The hash value for "Hello" is 
When is hashing useful?
Storing and comparing data. Passwords are excellent candidates for hashing.
if two hashes match, the same value used to create both hashes.

What is salt?
 Salt is a random string that is added to a value before it is hashed.
 Makes hashed values much more difficult to crack.

Adding salt to a hash. The word "Hello" is goig to be hashed. 
The salt "XLhIjFD" is appended to "Hello".
 
 


	
	
