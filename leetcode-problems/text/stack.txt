6.1 Stacks

A stack is a collection of objects that are inserted and removed according to the last-in, first-out (LIFO) principle. 
A user may insert objects into a stack at anytime, but may only access or remove the most recently inserted object that remains (at the so-called "top" of the stack). 
The name "stack" is derived from the metaphor of a stack of plates in a spring-loaded, cafeteria plate dispenser. 
In this case, the fundamental operations involve the "pushing" and "popping" of plates on the stack.
When we need a new plate from the dispenser, we "pop" the top plate off the stack, and when we add a plate, we "push" it down on the stack to become the new top plate. 
Perhaps an even more amusing example is a PEZ ® candy dispenser, which stores mint candies in a spring-loaded container that "pops" out the topmost candy in the stack when the top of the dispenser is lifted (see Figure 6.1).

Figure 6.1: A schematic drawing of a PEZ ® dispenser; a physical implementation of the stack ADT. 
(PEZ ® is a registered trademark of PEZ Candy, Inc.)
Stacks are a fundamental data structure. They are used in many applications,including the following.

Example 6.1: Internet Web browsers store the addresses of recently visited sites on a stack. 
Each time a user visits a new site, that site’s address is "pushed" onto the stack of addresses. 
The browser then allows the user to "pop" back to previously visited sites using the "back" button.

Example 6.2: Text editors usually provide an "undo" mechanism that cancels recent editing operations and reverts to former states of a document. 
This undo operation can be accomplished by keeping text changes in a stack.

6.1.1 The Stack Abstract Data Type
Stacks are the simplest of all data structures, yet they are also among the most important, as they are used in a host of different applications, and as a tool for many more sophisticated data structures and algorithms. 
Formally, a stack is an abstract data type (ADT) that supports the following two update methods:
push(e): Adds element e to the top of the stack.
pop( ): Removes and returns the top element from the stack (or null if the stack is empty).
Additionally, a stack supports the following accessor methods for convenience:
top( ): Returns the top element of the stack, without removing it (or null if the stack is empty).
size( ): Returns the number of elements in the stack.
isEmpty( ): Returns a boolean indicating whether the stack is empty.
By convention, we assume that elements added to the stack can have arbitrary type and that a newly created stack is empty.

